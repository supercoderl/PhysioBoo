// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhysioBoo.Infrastructure.Database;

#nullable disable

namespace PhysioBoo.Infrastructure.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250915021213_Update-User-Timestamp-For-Testing")]
    partial class UpdateUserTimestampForTesting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChiefComplaint")
                        .HasColumnType("text");

                    b.Property<string>("ClinicalFindings")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DifferencentialDiagnosis")
                        .HasColumnType("text");

                    b.Property<string>("DischargeSummary")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("DoctorNotes")
                        .HasColumnType("text");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("text");

                    b.Property<string>("FinalDiagnosis")
                        .HasColumnType("text");

                    b.Property<string>("FollowUpInstructions")
                        .HasColumnType("text");

                    b.Property<string>("HistoryOfPresentIllness")
                        .HasColumnType("text");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("Icd10Codes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("InvestigationsOrdered")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicationsPrescribed")
                        .HasColumnType("text");

                    b.Property<string>("PastMedicalHistory")
                        .HasColumnType("text");

                    b.Property<string>("PatientEducationProvided")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhysicalExamination")
                        .HasColumnType("text");

                    b.Property<string>("ProceduresPerformed")
                        .HasColumnType("text");

                    b.Property<string>("Prognosis")
                        .HasColumnType("text");

                    b.Property<string>("ProvisionalDiagnosis")
                        .HasColumnType("text");

                    b.Property<DateOnly>("RecordDate")
                        .HasColumnType("date");

                    b.Property<string>("RecordNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReviewOfSystems")
                        .HasColumnType("text");

                    b.Property<string>("SocialHistory")
                        .HasColumnType("text");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VitalSigns")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RecordNumber")
                        .IsUnique();

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ApprovalDate")
                        .HasColumnType("date");

                    b.Property<string>("ApprovalNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BanReason")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BrandName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Composition")
                        .HasColumnType("text");

                    b.Property<string>("Contraindications")
                        .HasColumnType("text");

                    b.Property<string>("ControlledSubstanceSchedule")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("DosageForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrugCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrugInteractions")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("GenericName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("HsnCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsControlledSubstance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeneric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrescriptionRequired")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ManufacturingDate")
                        .HasColumnType("date");

                    b.Property<int?>("MaximumAge")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Mrp")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OverdoseSymptoms")
                        .HasColumnType("text");

                    b.Property<string>("PackSize")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PharmacologicalClass")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PregnancyCategory")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("QrCode")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RouteOfAdministration")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("text");

                    b.Property<string>("StorageConditions")
                        .HasColumnType("text");

                    b.Property<int?>("StorageTemperatureMax")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageTemperatureMin")
                        .HasColumnType("integer");

                    b.Property<string>("Strength")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("TherapeuticClass")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsageInstructions")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("WarningLabels")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Barcode");

                    b.HasIndex("BrandName");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DrugCode");

                    b.HasIndex("GenericName");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("Name");

                    b.HasIndex("QrCode");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.MedicineCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsControlled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiresPrescription")
                        .HasColumnType("boolean");

                    b.Property<string>("StorageConditions")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("MedicinesCategories");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.MedicineInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNearExpiry")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaximumStockLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityDamaged")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityExpired")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("integer");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("integer");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("integer");

                    b.Property<string>("StorageLocation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("TotalPurchaseValue")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("UnitPurchasePrice")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("UnitSellingPrice")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("MedicineId", "HospitalId", "BatchNumber");

                    b.ToTable("MedicinesInventories");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppoinmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Instructions")
                        .HasColumnType("text");

                    b.Property<bool>("IsDigital")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxRefills")
                        .HasColumnType("integer");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PharmacistNotes")
                        .HasColumnType("text");

                    b.Property<DateOnly>("PrescriptionDate")
                        .HasColumnType("date");

                    b.Property<string>("PrescriptionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RefillCount")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("ValidUntil")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AppoinmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionNumber")
                        .IsUnique();

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.PrescriptionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DosageForm")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DosageInstructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("integer");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GenericName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsControlledSubstance")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("numeric(8,2)");

                    b.Property<int>("QuantityDispensed")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityPrescribed")
                        .HasColumnType("integer");

                    b.Property<string>("RouteOfAdministration")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("text");

                    b.Property<string>("Strength")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("SubtituteAllowed")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Core.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ApartmentUnit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Core.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("IdentificationExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IdentificationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PreferredCommunication")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationNumber");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Core.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AccountLockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AlternatePhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("PhoneVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("TwoFactorSecret")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingModality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AverageDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PreparationInstructions")
                        .HasColumnType("text");

                    b.Property<bool>("PreparationRequired")
                        .HasColumnType("boolean");

                    b.Property<decimal>("RadiationDose")
                        .HasColumnType("numeric(8,4)");

                    b.Property<bool>("RequiresContrast")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.ToTable("ImagingModalities");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllergiesNoted")
                        .HasColumnType("text");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("BodyPart")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Claustrophobia")
                        .HasColumnType("boolean");

                    b.Property<string>("ClinicalHistory")
                        .HasColumnType("text");

                    b.Property<string>("ClinicalIndication")
                        .HasColumnType("text");

                    b.Property<bool>("ContrastRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("ContrastType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("integer");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImplantDetails")
                        .HasColumnType("text");

                    b.Property<bool>("ImplantsPresent")
                        .HasColumnType("boolean");

                    b.Property<string>("LabPriority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("ModalityId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("PatientHeight")
                        .HasColumnType("numeric(5,2)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PatientWeight")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("PregnancyStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PreparationGiven")
                        .HasColumnType("boolean");

                    b.Property<string>("ProvisionalDiagnosis")
                        .HasColumnType("text");

                    b.Property<Guid?>("RadiologistId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ScheduledDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("ScheduledTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("SpecificQuestions")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("TechnicianId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ModalityId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.HasIndex("RadiologistId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("ImagingOrders");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AmendmentReason")
                        .HasColumnType("text");

                    b.Property<string>("ComparisonStudies")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CriticalFindings")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DicomStudyUid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("DictatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Findings")
                        .HasColumnType("text");

                    b.Property<int>("ImagesCount")
                        .HasColumnType("integer");

                    b.Property<string>("ImagesUrl")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ImagingOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Impression")
                        .HasColumnType("text");

                    b.Property<bool>("IsAmended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNormal")
                        .HasColumnType("boolean");

                    b.Property<string>("Limitations")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RadiologistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Recommendations")
                        .HasColumnType("text");

                    b.Property<string>("ReportNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReportPdfUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateOnly>("StudyDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("StudyTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Technique")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TranscribedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ImagingOrderId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RadiologistId");

                    b.HasIndex("ReportNumber")
                        .IsUnique();

                    b.ToTable("ImagingReports");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClinicalHistory")
                        .HasColumnType("text");

                    b.Property<string>("CollectionAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateOnly?>("CollectionDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("CollectionTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("CollectionType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<string>("LabPriority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<TimeOnly>("OrderTime")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PrivisionalDiagnosis")
                        .HasColumnType("text");

                    b.Property<string>("ReportDeliveryMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("LabOrders");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AbnormalFlag")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("CritialFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceRange")
                        .HasColumnType("text");

                    b.Property<string>("ResultUnit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ResultValue")
                        .HasColumnType("text");

                    b.Property<bool>("SampleCollected")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SampleCollectionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SampleCollectorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("TechnicianId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TestCost")
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabOrderId");

                    b.HasIndex("LabTestId");

                    b.HasIndex("SampleCollectorId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("LabOrdersItem");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AmendmentReason")
                        .HasColumnType("text");

                    b.Property<string>("ClinicalCorrelation")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CriticalValues")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DeliveredToPatient")
                        .HasColumnType("boolean");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAmended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OriginalReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("OverallImpression")
                        .HasColumnType("text");

                    b.Property<Guid>("PathologistId")
                        .HasColumnType("uuid");

                    b.Property<string>("PathologistSignature")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Recommendations")
                        .HasColumnType("text");

                    b.Property<DateOnly>("ReportDate")
                        .HasColumnType("date");

                    b.Property<string>("ReportNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReportPdfUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<TimeOnly>("ReportTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LabOrderId");

                    b.HasIndex("OriginalReportId");

                    b.HasIndex("PathologistId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReportNumber")
                        .IsUnique();

                    b.ToTable("LabReports");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CollectionInstructions")
                        .HasColumnType("text");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric(8,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FastingHours")
                        .HasColumnType("integer");

                    b.Property<bool>("FastingRequired")
                        .HasColumnType("boolean");

                    b.Property<decimal>("HomeCollectionCharge")
                        .HasColumnType("numeric(8,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHomeCollectionAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProfile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrgentAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Methodology")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NormalPediatric")
                        .HasColumnType("text");

                    b.Property<string>("NormalRangeFemale")
                        .HasColumnType("text");

                    b.Property<string>("NormalRangeMale")
                        .HasColumnType("text");

                    b.Property<string>("PreparationInstructions")
                        .HasColumnType("text");

                    b.Property<bool>("PreparationRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("ReportingTimeHours")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresAppoinment")
                        .HasColumnType("boolean");

                    b.Property<string>("SampleType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SampleVolume")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TestCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UnitOfMeasurement")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("UrgentCost")
                        .HasColumnType("numeric(8,2)");

                    b.Property<int>("UrgentReportingTimeHours")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TestCode");

                    b.HasIndex("TestName");

                    b.ToTable("LabTests");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabTestCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.ToTable("LabTestCategories");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<int>("AdvanceBookingDays")
                        .HasColumnType("integer");

                    b.Property<string>("Archivements")
                        .HasColumnType("text");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("numeric(3,2)");

                    b.Property<string>("BankAccountDetails")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<int>("BufferTime")
                        .HasColumnType("integer");

                    b.Property<string>("CancellationPolicy")
                        .HasColumnType("text");

                    b.Property<int>("ConferencePresentations")
                        .HasColumnType("integer");

                    b.Property<int>("ConsultationDuration")
                        .HasColumnType("integer");

                    b.Property<decimal>("ConsultationFeeMax")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("ConsultationFeeMin")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EmergencyConsultationFee")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("FollowUpFee")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Gstin")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("HomeVisitFee")
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool>("IsAvailableEmergency")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailableHomeVisit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailableOnline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<string[]>("LanguagesSpoken")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateOnly>("MedicalLicenseExpiry")
                        .HasColumnType("date");

                    b.Property<string>("MedicalLicenseIssuingAuthority")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MedicalLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PanNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("PatientSatisfactionScore")
                        .HasColumnType("numeric(3,2)");

                    b.PrimitiveCollection<string[]>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid?>("PrimarySpecialtyId")
                        .HasColumnType("uuid");

                    b.Property<int>("PublicationsCount")
                        .HasColumnType("integer");

                    b.Property<string>("ResearchInterests")
                        .HasColumnType("text");

                    b.Property<decimal>("SuccessRate")
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalPatientTreated")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSurgeriesPerformed")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("VerificationDate")
                        .HasColumnType("time without time zone");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("VideoConsultationFee")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.Property<int>("YearsOfPractice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MedicalLicenseNumber")
                        .IsUnique();

                    b.HasIndex("PrimarySpecialtyId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorAward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AwardCategory")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly?>("AwardDate")
                        .HasColumnType("date");

                    b.Property<string>("AwardLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AwardYear")
                        .HasColumnType("integer");

                    b.Property<string>("AwardingOrganization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CertificateUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("MediaCoverageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("MonetaryValue")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorAwards");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorCertification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CertificateDocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CertificationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CertificationType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsLifetime")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("IssuingOrganization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VerificationUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorCertifications");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DegreeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DurationYears")
                        .HasColumnType("numeric(3,2)");

                    b.Property<string>("GradeClass")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("GradeGPA")
                        .HasColumnType("numeric(3,2)");

                    b.Property<decimal?>("GradePercentage")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("ThesisGuide")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ThesisTitle")
                        .HasColumnType("text");

                    b.Property<string>("UniversityName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("VerificationDocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorEducations");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentsUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("SubstituteDoctorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalDays")
                        .HasColumnType("numeric(3,1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SubstituteDoctorId");

                    b.ToTable("DoctorLeaves");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorPublication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abstract")
                        .HasColumnType("text");

                    b.Property<int>("CitationCount")
                        .HasColumnType("integer");

                    b.Property<string>("CoAuthors")
                        .HasColumnType("text");

                    b.Property<string>("ConferenceName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Doi")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("ImpactFactor")
                        .HasColumnType("numeric(5,3)");

                    b.Property<bool>("IsPeerReviewed")
                        .HasColumnType("boolean");

                    b.Property<string>("Isbm")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Issue")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("JournalName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.PrimitiveCollection<string[]>("Keywords")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Pages")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PdfUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Pmid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateOnly?>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<string>("PublicationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PublicationUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Volume")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("Doi");

                    b.HasIndex("Pmid");

                    b.ToTable("DoctorPublications");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly?>("BreakEndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("BreakStartTime")
                        .HasColumnType("time without time zone");

                    b.Property<decimal>("ConsultationFee")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxPatientsPerSlot")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ScheduleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("SlotDuration")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("CertificationDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("CertificationExpiry")
                        .HasColumnType("date");

                    b.Property<string>("CertificationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("SpecialtyId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialtys");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorWorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Archievements")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrganizationType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReasonForLeaving")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<string>("SalaryRange")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("SupervisorContact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SupervisorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorWorkExperiences");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.HospitalStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankAccountDetails")
                        .HasColumnType("jsonb");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("EsiNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("numeric(8,2)");

                    b.Property<DateOnly>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("MedicalFitnessExpiry")
                        .HasColumnType("date");

                    b.Property<string>("PanNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PfNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PoliceVerificationStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("ProbationEndDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ReportingManger")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("ShiftPattern")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StaffType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("TerminationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("HospitalId");

                    b.HasIndex("ReportingManger");

                    b.ToTable("HospitalStaffs");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.MedicalSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AverageConsultationDuration")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDiagnostic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurgical")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ParentSpecialtyId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequiredQualifications")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.HasIndex("ParentSpecialtyId");

                    b.ToTable("MedicalSpecialties");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly?>("ActualEndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("ActualStartTime")
                        .HasColumnType("time without time zone");

                    b.Property<decimal>("AdditionalCharges")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("AppointmentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AppointmentTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CancelledBy")
                        .HasColumnType("uuid");

                    b.Property<string>("ChiefComplaint")
                        .HasColumnType("text");

                    b.Property<decimal>("ConsultationFee")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("ConsultationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("EstimatedWaitTime")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("FollowUpDate")
                        .HasColumnType("date");

                    b.Property<string>("FollowUpInstructions")
                        .HasColumnType("text");

                    b.Property<bool>("FollowUpRequired")
                        .HasColumnType("boolean");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("InsuranceClaimAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("InvestigationsOrdered")
                        .HasColumnType("text");

                    b.Property<string>("PatientFeedback")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<int>("PatientSatisfactionRating")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostAppointmentNotes")
                        .HasColumnType("text");

                    b.Property<string>("PreAppointmentNotes")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionsGiven")
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("text");

                    b.Property<string>("ReferralReason")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReferringDoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RescheduledFromAppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateOnly>("ScheduledDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("ScheduledEndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("ScheduledTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentNumber")
                        .IsUnique();

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferringDoctorId");

                    b.HasIndex("RescheduledFromAppointmentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.AppointmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BufferTime")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<decimal>("ConsultationFee")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultDuration")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PreparationInstructions")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresPreparation")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("AppointmentTypes");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BillDate")
                        .HasColumnType("date");

                    b.Property<string>("BillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeOnly>("BillTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric(12,4)");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("InsuranceApprovedAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("InsuranceClaimNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("InsuranceCompanyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("InsurancePaidAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal>("PatientCopayAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("BillNumber")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.BillItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal>("InsuranceCopayPercentage")
                        .HasColumnType("numeric(5,2)");

                    b.Property<bool>("IsInsuranceCovered")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("PerformedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PerformedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("PerformedBy");

                    b.ToTable("BillItems");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BedCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("BudgetAllocated")
                        .HasColumnType("numeric(15,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EquipmentList")
                        .HasColumnType("jsonb");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<Guid?>("HeadOfDepartment")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCriticalCare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInPatient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOutPatient")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OperationHours")
                        .HasColumnType("jsonb");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Wing")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentCode");

                    b.HasIndex("HeadOfDepartment");

                    b.HasIndex("HospitalId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccreditationBody")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("AccreditationExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AmbulancePhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("BedCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("EmergencyCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Facilities")
                        .HasColumnType("jsonb");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("HospitalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("HospitalGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("HospitalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("IcuCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Images")
                        .HasColumnType("jsonb");

                    b.PrimitiveCollection<string[]>("InsuranceAccepted")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("Is24Hours")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<string[]>("LanguagesSupported")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric(10,8)");

                    b.Property<DateTime?>("LicenseExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("Longtitude")
                        .HasColumnType("numeric(11,8)");

                    b.Property<string>("MissionStatement")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OperatingHours")
                        .HasColumnType("jsonb");

                    b.Property<int>("OperationTheaters")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VisionStatement")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalCode");

                    b.HasIndex("HospitalGroupId");

                    b.HasIndex("Name");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.HospitalGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccreditationDetails")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeadquartersAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("HospitalGroups");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<string>("CashLastFour")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text");

                    b.Property<string>("GatewayResponse")
                        .HasColumnType("jsonb");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeOnly>("PaymentTime")
                        .HasColumnType("time without time zone");

                    b.Property<Guid?>("ProcessedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("ReceiptGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("ReceiptUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefundReason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentNumber")
                        .IsUnique();

                    b.HasIndex("ProcessedBy");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.PatientInformation.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllergyInformation")
                        .HasColumnType("text");

                    b.Property<string>("AnnualIncomeRange")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CommunicationPreferences")
                        .HasColumnType("jsonb");

                    b.Property<bool>("ConsentForMarketing")
                        .HasColumnType("boolean");

                    b.Property<bool>("ConsentForResearch")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentMedications")
                        .HasColumnType("text");

                    b.Property<bool>("DataSharingConsent")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("text");

                    b.Property<decimal?>("InssuranceCoverageAmount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateOnly?>("InssuranceExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("InssurancePolicyNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InssuranceProvider")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsChronicPatient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeniorCitizen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVip")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LifestyleNotes")
                        .HasColumnType("text");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("integer");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextFollowUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Occupation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("PatientNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PatientType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PreferredAppointmentTime")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("PreferredDoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PreferredHospitalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryDoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReferralHospitalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReferredBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SurgicalHistory")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmountSpent")
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("TotalVisits")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientNumber")
                        .IsUnique();

                    b.HasIndex("PreferredDoctorId");

                    b.HasIndex("PreferredHospitalId");

                    b.HasIndex("PrimaryDoctorId");

                    b.HasIndex("ReferralHospitalId");

                    b.HasIndex("ReferredBy");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.PatientInformation.PatientAllergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllergenName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AllergenType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("FirstOccurenceDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("LastOccurenceDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReactionType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TreatmentGiven")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AllergenName");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.PatientInformation.PatientMedicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConditionCategory")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DiagnosedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DiagnosedDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("DiagnosisHospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("FollowUpRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Icd10Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("MedicationsPrescribed")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("NextReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TreatmentSummary")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConditionName");

                    b.HasIndex("DiagnosedBy");

                    b.HasIndex("DiagnosisHospitalId");

                    b.HasIndex("Icd10Code");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicalHistories");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Support.InsuranceCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AverageClaimSettlementTime")
                        .HasColumnType("integer");

                    b.Property<bool>("CashlessFacility")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("ClaimSettlementRatio")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaximumCoverageAmount")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NetworkHospitals")
                        .HasColumnType("jsonb");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("ReimbursementFacility")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<string[]>("RequiredDocuments")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("TermAndConditions")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.ToTable("InsuranceCompanies");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Support.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("EstablishedYear")
                        .HasColumnType("integer");

                    b.Property<bool>("FdaApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("GmpCertified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsoCertified")
                        .HasColumnType("boolean");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("Name");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Support.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Cons")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DoctorBehavior")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorPunctuality")
                        .HasColumnType("integer");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("FacilityCleanliness")
                        .HasColumnType("integer");

                    b.Property<int>("HelpfulCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModeratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModeratedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("ModerationNotes")
                        .HasColumnType("text");

                    b.Property<string>("ModerationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("NotHelpfulCount")
                        .HasColumnType("integer");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<string>("Pros")
                        .HasColumnType("text");

                    b.Property<int>("ReportedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RespondedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResponseText")
                        .HasColumnType("text");

                    b.Property<string>("ReviewType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<int>("StaffBehavior")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TreatmentSatisfaction")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ValueForMoney")
                        .HasColumnType("integer");

                    b.Property<string>("VisitedFor")
                        .HasColumnType("text");

                    b.Property<int>("WaitTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("WouldRecommend")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("EntityId");

                    b.HasIndex("ModeratedBy");

                    b.HasIndex("RespondedBy");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Support.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AlternatePhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BankAccountDetails")
                        .HasColumnType("jsonb");

                    b.Property<string>("BusinessRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DeliveryReliabilityScore")
                        .HasColumnType("numeric(3,2)");

                    b.Property<DateOnly?>("DrugLicenseExpiry")
                        .HasColumnType("date");

                    b.Property<string>("DrugLicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FdaRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("GmpCertified")
                        .HasColumnType("boolean");

                    b.Property<string>("GstNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("IsoCertification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly?>("LastOrderDate")
                        .HasColumnType("date");

                    b.Property<int>("LeadTimeDays")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumOrderValue")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("PanNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("QualityRating")
                        .HasColumnType("numeric(3,2)");

                    b.Property<decimal>("ServiceRating")
                        .HasColumnType("numeric(3,2)");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPurchaseValue")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Phone");

                    b.HasIndex("SupplierCode");

                    b.HasIndex("SupplierName");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.MedicalRecord", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Appointment", "Appointment")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Creator")
                        .WithMany("CreatedMedicalRecords")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Creator");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.Medicine", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Clinical.MedicineCategory", "Category")
                        .WithMany("Medicines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Support.Manufacturer", "Manufacturer")
                        .WithMany("Medicines")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.MedicineCategory", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Clinical.MedicineCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.MedicineInventory", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("MedicineInventories")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Clinical.Medicine", "Medicine")
                        .WithMany("MedicineInventories")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Support.Supplier", "Supplier")
                        .WithMany("MedicineInventories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Medicine");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.Prescription", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppoinmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("Prescriptions")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Clinical.MedicalRecord", "MedicalRecord")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.PrescriptionItem", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Clinical.Medicine", "Medicine")
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Clinical.Prescription", "Prescription")
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Core.Address", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Core.User", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Creator")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Updater")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingOrder", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Appointment", "Appointment")
                        .WithMany("ImagingOrders")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Creator")
                        .WithMany("CreatedImagingOrders")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("ImagingOrders")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("ImagingOrders")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingModality", "Modality")
                        .WithMany("ImagingOrders")
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("ImagingOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Radiologist")
                        .WithMany("RadiologistImagingOrders")
                        .HasForeignKey("RadiologistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Technician")
                        .WithMany("ImagingOrders")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Appointment");

                    b.Navigation("Creator");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Modality");

                    b.Navigation("Patient");

                    b.Navigation("Radiologist");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingReport", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingOrder", "ImagingOrder")
                        .WithMany("ImagingReports")
                        .HasForeignKey("ImagingOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("ImagingReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Radiologist")
                        .WithMany("ImagingReports")
                        .HasForeignKey("RadiologistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ImagingOrder");

                    b.Navigation("Patient");

                    b.Navigation("Radiologist");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabOrder", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Appointment", "Appointment")
                        .WithMany("LabOrders")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Creator")
                        .WithMany("CreatedLabOrders")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("LabOrders")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("LabOrders")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("LabOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Creator");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabOrderItem", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.LaboratoryImaging.LabOrder", "LabOrder")
                        .WithMany("LabOrderItems")
                        .HasForeignKey("LabOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.LaboratoryImaging.LabTest", "LabTest")
                        .WithMany("LabOrderItems")
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "SampleCollector")
                        .WithMany("CollectedLabSamples")
                        .HasForeignKey("SampleCollectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Technician")
                        .WithMany("ProcessedLabTests")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Verifier")
                        .WithMany("VerifiedLabTests")
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LabOrder");

                    b.Navigation("LabTest");

                    b.Navigation("SampleCollector");

                    b.Navigation("Technician");

                    b.Navigation("Verifier");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabReport", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("LabReports")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.LaboratoryImaging.LabOrder", "LabOrder")
                        .WithMany("LabReports")
                        .HasForeignKey("LabOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.LaboratoryImaging.LabReport", "OriginalReport")
                        .WithMany("AmendedReports")
                        .HasForeignKey("OriginalReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Pathologist")
                        .WithMany("PathologistLabReports")
                        .HasForeignKey("PathologistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("LabReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("LabOrder");

                    b.Navigation("OriginalReport");

                    b.Navigation("Pathologist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabTest", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.LaboratoryImaging.LabTestCategory", "Category")
                        .WithMany("LabTests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.DoctorSpecialty", "PrimarySpecialty")
                        .WithMany("Doctors")
                        .HasForeignKey("PrimarySpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "VerifiedByUser")
                        .WithMany("VerifiedDoctors")
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PrimarySpecialty");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorAward", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Awards")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorCertification", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Certifications")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorEducation", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Educations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorLeave", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Approver")
                        .WithMany("ApprovedLeaves")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Leaves")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "SubstituteDoctor")
                        .WithMany("SubstitutedLeaves")
                        .HasForeignKey("SubstituteDoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Approver");

                    b.Navigation("Doctor");

                    b.Navigation("SubstituteDoctor");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorPublication", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Publications")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorSchedule", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Department", "Department")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorSpecialty", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.MedicalSpecialty", "Specialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorWorkExperience", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.HospitalStaff", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Department", "Department")
                        .WithMany("HospitalStaffs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("HospitalStaffs")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Manager")
                        .WithMany("HospitalStaffs")
                        .HasForeignKey("ReportingManger")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Hospital");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.MedicalSpecialty", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.MedicalSpecialty", "ParentSpecialty")
                        .WithMany("SubSpecialties")
                        .HasForeignKey("ParentSpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentSpecialty");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Appointment", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "CancelledByUser")
                        .WithMany("CancelledAppointments")
                        .HasForeignKey("CancelledBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "CreatedByUser")
                        .WithMany("CreatedAppointments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Department", "Department")
                        .WithMany("Appointments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("Appointments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "ReferringDoctor")
                        .WithMany("ReferredAppointments")
                        .HasForeignKey("ReferringDoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Appointment", "RescheduledFromAppointment")
                        .WithMany("RescheduledAppointments")
                        .HasForeignKey("RescheduledFromAppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppointmentType");

                    b.Navigation("CancelledByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");

                    b.Navigation("ReferringDoctor");

                    b.Navigation("RescheduledFromAppointment");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Bill", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Appointment", "Appointment")
                        .WithMany("Bills")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Approver")
                        .WithMany("ApprovedBills")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Creator")
                        .WithMany("CreatedBills")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Department", "Department")
                        .WithMany("Bills")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("Bills")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Support.InsuranceCompany", "InsuranceCompany")
                        .WithMany("Bills")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("Bills")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Approver");

                    b.Navigation("Creator");

                    b.Navigation("Department");

                    b.Navigation("Hospital");

                    b.Navigation("InsuranceCompany");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.BillItem", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Bill", "Bill")
                        .WithMany("BillItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "PerformedByUser")
                        .WithMany("PerformedBillItems")
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bill");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Department", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "HeadOfDeptUser")
                        .WithMany("HeadedDepartments")
                        .HasForeignKey("HeadOfDepartment")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HeadOfDeptUser");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Hospital", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.HospitalGroup", "HospitalGroup")
                        .WithMany("Hospitals")
                        .HasForeignKey("HospitalGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HospitalGroup");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Payment", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("Payments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Processor")
                        .WithMany("ProcessedPayments")
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bill");

                    b.Navigation("Patient");

                    b.Navigation("Processor");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.PatientInformation.Patient", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "PreferredDoctor")
                        .WithMany("PreferredPatients")
                        .HasForeignKey("PreferredDoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "PreferredHospital")
                        .WithMany("PreferredPatients")
                        .HasForeignKey("PreferredHospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "PrimaryDoctor")
                        .WithMany("Patients")
                        .HasForeignKey("PrimaryDoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "ReferralHospital")
                        .WithMany("ReferredPatients")
                        .HasForeignKey("ReferralHospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "ReferringDoctor")
                        .WithMany("ReferredPatients")
                        .HasForeignKey("ReferredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PreferredDoctor");

                    b.Navigation("PreferredHospital");

                    b.Navigation("PrimaryDoctor");

                    b.Navigation("ReferralHospital");

                    b.Navigation("ReferringDoctor");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.PatientInformation.PatientAllergy", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.PatientInformation.PatientMedicalHistory", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", "DiagnosedDoctor")
                        .WithMany("DiagnosedHistories")
                        .HasForeignKey("DiagnosedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Hospital", "DiagnosisHospital")
                        .WithMany("PatientMedicalHistories")
                        .HasForeignKey("DiagnosisHospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.PatientInformation.Patient", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiagnosedDoctor");

                    b.Navigation("DiagnosisHospital");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Support.Review", b =>
                {
                    b.HasOne("PhysioBoo.Domain.Entities.Operation.Appointment", "Appointment")
                        .WithMany("Reviews")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Moderator")
                        .WithMany("ModeratedReviews")
                        .HasForeignKey("ModeratedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Responder")
                        .WithMany("Responses")
                        .HasForeignKey("RespondedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhysioBoo.Domain.Entities.Core.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Moderator");

                    b.Navigation("Responder");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.MedicalRecord", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.Medicine", b =>
                {
                    b.Navigation("MedicineInventories");

                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.MedicineCategory", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Clinical.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Core.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ApprovedBills");

                    b.Navigation("ApprovedLeaves");

                    b.Navigation("CancelledAppointments");

                    b.Navigation("CollectedLabSamples");

                    b.Navigation("CreatedAppointments");

                    b.Navigation("CreatedBills");

                    b.Navigation("CreatedImagingOrders");

                    b.Navigation("CreatedLabOrders");

                    b.Navigation("CreatedMedicalRecords");

                    b.Navigation("CreatedUsers");

                    b.Navigation("HeadedDepartments");

                    b.Navigation("HospitalStaffs");

                    b.Navigation("ImagingOrders");

                    b.Navigation("ImagingReports");

                    b.Navigation("ModeratedReviews");

                    b.Navigation("PathologistLabReports");

                    b.Navigation("PerformedBillItems");

                    b.Navigation("ProcessedLabTests");

                    b.Navigation("ProcessedPayments");

                    b.Navigation("RadiologistImagingOrders");

                    b.Navigation("Responses");

                    b.Navigation("Reviews");

                    b.Navigation("UpdatedUsers");

                    b.Navigation("VerifiedDoctors");

                    b.Navigation("VerifiedLabTests");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingModality", b =>
                {
                    b.Navigation("ImagingOrders");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.ImagingOrder", b =>
                {
                    b.Navigation("ImagingReports");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabOrder", b =>
                {
                    b.Navigation("LabOrderItems");

                    b.Navigation("LabReports");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabReport", b =>
                {
                    b.Navigation("AmendedReports");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabTest", b =>
                {
                    b.Navigation("LabOrderItems");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.LaboratoryImaging.LabTestCategory", b =>
                {
                    b.Navigation("LabTests");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Awards");

                    b.Navigation("Certifications");

                    b.Navigation("DiagnosedHistories");

                    b.Navigation("Educations");

                    b.Navigation("ImagingOrders");

                    b.Navigation("LabOrders");

                    b.Navigation("LabReports");

                    b.Navigation("Leaves");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Patients");

                    b.Navigation("PreferredPatients");

                    b.Navigation("Prescriptions");

                    b.Navigation("Publications");

                    b.Navigation("ReferredAppointments");

                    b.Navigation("ReferredPatients");

                    b.Navigation("Schedules");

                    b.Navigation("Specialties");

                    b.Navigation("SubstitutedLeaves");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.DoctorSpecialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.MedicalStaff.MedicalSpecialty", b =>
                {
                    b.Navigation("DoctorSpecialties");

                    b.Navigation("SubSpecialties");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Appointment", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("ImagingOrders");

                    b.Navigation("LabOrders");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Prescriptions");

                    b.Navigation("RescheduledAppointments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Bill", b =>
                {
                    b.Navigation("BillItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Department", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Bills");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("HospitalStaffs");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.Hospital", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Bills");

                    b.Navigation("Departments");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("HospitalStaffs");

                    b.Navigation("ImagingOrders");

                    b.Navigation("LabOrders");

                    b.Navigation("MedicalRecords");

                    b.Navigation("MedicineInventories");

                    b.Navigation("PatientMedicalHistories");

                    b.Navigation("PreferredPatients");

                    b.Navigation("Prescriptions");

                    b.Navigation("ReferredPatients");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Operation.HospitalGroup", b =>
                {
                    b.Navigation("Hospitals");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.PatientInformation.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Appointments");

                    b.Navigation("Bills");

                    b.Navigation("ImagingOrders");

                    b.Navigation("ImagingReports");

                    b.Navigation("LabOrders");

                    b.Navigation("LabReports");

                    b.Navigation("MedicalHistories");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Payments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Support.InsuranceCompany", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Support.Manufacturer", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("PhysioBoo.Domain.Entities.Support.Supplier", b =>
                {
                    b.Navigation("MedicineInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
